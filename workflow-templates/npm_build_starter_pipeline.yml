name: CICD-NODE-WEBAPP Deployment Starter Pipeline
on: workflow_dispatch

jobs:
  Pre-Work:
    runs-on: ubuntu-latest    
    steps:
    - run: echo Executing CI CD Build for Node based Sample Repository
    
##================================================================================================================================# 
# CI Build and Package / Image Creation  - GITHub Packages is rescommended for Storing packages

  Build_Test_and_Publish_Package:
    runs-on: ubuntu-latest
    needs: Pre-Work
    steps:
    - name: ============ Checkout the repository Code ==========
      uses: actions/checkout@v2
      
    - name: ========== Build and push Build Artifacts to artifact Store ==========
      uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/CI@main
      env: # provide Github PAT to authenticate github package registry.
        NODE_AUTH_TOKEN: ${{secrets.SAML_GITHUB_TOKEN}} 
      with:
# provide the project Build tool,build file path and its relative location Build tool
        build_tool: npm
        application_name: devsecops-sample-app
        build_file_path: .
        build_file_name: package.json
        node_version: 12
# artifact repository url for github packages
        artifact_repository_url: https://npm.pkg.github.com/
# npm build phases to execute and any npm arguments that you need to execute the build. {add additional npm phase if needed - install test publish  }
        build_phases: install pack
        run_code_quality_analysis: false

# upload the package created for testing purpose comment this if not needed
    - name: 'Upload the package to build'
      uses: actions/upload-artifact@v2
      with:
        name: devsecops-sample-app-${{github.sha }}.tgz
        path: |
          ./digitalinnovation-*.tgz     
        
# ##================================================================================================================================#  
# Code Quality Scan Action - SonarCloud is the Recomended Tool

  Code_Quality_Scan:
    runs-on: ubuntu-latest #need to use self hosted runner for sonarqube.
    needs: Build_Test_and_Publish_Package 
    steps:
    - name: ============ Checkout the repository Code ========== same as git-repo (get)
      uses: actions/checkout@v2
     
    - name: ========== call custom action to execute CodeQuality Scan ==========
      uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/codequality@latest
      with:
# Provide the Sonar URL, Project name or ProjectKey and the Sonar token to connect.
        cq_host_url: https://sonarcloud.io
        cq_project_name: ${{ secrets.SONAR_PROJECT_NAME }}
        cq_project_key: ${{ secrets.SONAR_PROJECT_KEY }} 
        cq_token: ${{ secrets.SONAR_TOKEN }}
        cq_scan_arguments: -Dsonar.organization=digitalinnovation
          
        
##================================================================================================================================#  
# Create Image and push to Containder Registry - GITHUB packages is the recommended Registry Server

  Build_Push_Container_image:
    runs-on: ubuntu-latest 
    needs: Build_Test_and_Publish_Package
    steps:
    - name: ============ Checkout the repository Code ========== same as git-repo (get)
      uses: actions/checkout@v2
      
    - name: =========  Build and push image to Container Registry. ===========
# you can also add this as part of the build workflow by setting the build_and_push_container_image: true
      uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/CI/push_image@latest
      with:
# Provide the Dockerfile name and its relative path to build the image
        cr_dockerfile_name: Dockerfile
        cr_dockerfile_path: ./
# provide the information of the Projects ImageName, Imagetag, 
# container Registry to push (ACR/githubcontainer registry(GCR)) and the UserName, Password to connect to the Registry
        cr_imagename: ${{secrets.APP_IMAGE_NAME}}
                #devsecops_node_sample
        cr_imagetag: ${{ github.run_number }}
        cr_username: ${{ secrets.REGISTRY_USER }}
        cr_password: ${{ secrets.REGISTRY_PASSWORD }}
        cr_servername: ${{ secrets.REGISTRY_SERVER }}
 # below properties is required if  you are using ACR
        cr_tenant: ${{secrets.ACR_TENANT}}

# ##===========================================================================================================================================#  
# Appsec Scans are mandated for All Projects and has to be included in your pipeline - Set the scan flags based on your project requirements.

  Run_appsec_scans:
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: Build_Push_Container_image
    steps:
    - uses: actions/checkout@v2
    
    - uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/appsec@latest
      with:
# Set Flag to true if you want to run Dependency (SNYK) Scan,provide Name of the project Example: Test and Token should be created as GitHub secret
        application_name: "Name of your Application"
        run_dependency_scan: false
        dependency_scan_token: ${{ secrets.SNYK_TOKEN }}
        
# Set Flag to true if you want to run SAST (Fortify) Scan, provide Release ID,Scanner API Key and Scanner API secret should be created as secret
        run_sast_scan: false
        sast_release_id: ${{ secrets.FOD_RELEASE_ID }}
        sast_api_key: ${{ secrets.FOD_API_KEY}}
        sast_api_secret: ${{ secrets.FOD_API_SECRET}}
        # flag download the sast scan result, if run_sast_scan: true
        download_sast_scan_result: true
        
# Set Flag to true if you want to run Container (PRISMA) Scan,provide  Scanner Console URL,Access Key ID and Secret Key should be created as GitHub secret
        run_container_scan: true
        container_scan_url: https://europe-west3.cloud.twistlock.com/eu-2-143543845
        container_scan_user: ${{secrets.PRISMA_USER}}
        container_scan_password: ${{ secrets.PRISMA_PASSWORD }}
        
# Provide image name,tag, to be pulled in ACR. Example: nginx, 
        image_name: ${{secrets.APP_IMAGE_NAME}} 
               #devsecops_node_sample
        image_tag: ${{ github.run_number }}
# ACR/GCR Login Server name,Username and Password Example: <ACRname>azurecr.io
        registry_server: ${{ secrets.REGISTRY_SERVER }}
        registry_username: ${{ secrets.REGISTRY_USER }}
        registry_password: ${{ secrets.REGISTRY_PASSWORD }}
  
##================================================================================================================================# 
####   Sample Webapp Deployment require the webapp name, and the publish profile along with the path to the pacage or source path.       
            
# # Deploy the webapp to the webapp layer  
  Deploy-webapp:
    runs-on: ubuntu-latest
    needs: [Pre-Work, Build_Push_Container_image]
    steps:  
    - uses: actions/checkout@v2

    - name: 'verify download'
      run: |
         ls -lart
    - name: ========== Rerun build to Install Dependencies before Deployment ==========
      uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/CI@main
      with:
        build_tool: npm
        application_name: devsecops-sample-app
        build_file_path: .
        build_file_name: package.json
        node_version: 12
        artifact_repository_url: https://npm.pkg.github.com/
        build_phases: install 
        run_code_quality_analysis: false
        
         
    - name: 'Deploy to Azure WebApp'
      uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/CD/azure-webapp@main
      with:
        environment: dev    
        application_release_name: 2.10
        webapp_name: ${{secrets.AZURE_WEBAPP_NAME}}
        source_path: .
        azure_profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
   
    - uses: actions/download-artifact@v3
      with:
       name: devsecops-sample-app-${{github.sha }}.tgz

##================================================================================================================================# 
          
# Observability 
  NewRelic_Deploymentmarker:
    runs-on: ubuntu-latest
    needs: [Pre-Work, Deploy-webapp]
    continue-on-error: true
    steps:
    - name: New Relic deployment marker
      uses: DigitalInnovation/cloud-devsecops-pipelineactions/workflows/observability@latest
      with: 
        set_newRelic_Deployment_marker: true
# provide Newrelic API Key,Account ID,Application ID and Newrelic user should be created as GitHub Secret
        newRelic_key: ${{secrets.NEWRELIC_API_KEY}}
        newRelic_accountId: ${{secrets.NEWRELIC_ACCOUNTID}}
        newRelic_applicationId: ${{secrets.NEWRELIC_APP_ID}}
        newRelic_user: ${{ github.actor }}
        git_commit_id: ${{ github.sha }}
        comment: " Sample Test "  
        
        
##============================END OF PIPELINE WORKFLOW=================================================================================# 
